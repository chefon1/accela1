AWSTemplateFormatVersion: "2010-09-09"
Description: Template for API Gateway

#################################################################
########################### Parameters ##########################
#################################################################

Parameters:
  Environment:
    Type: String
  APIGatewayName:
    Type: String
    Description: Name of the S3 Bucket
  ApiEndpointType:
    Type: String
    Description: "ApiEndpointType"
    AllowedValues:
      - REGIONAL
      - PRIVATE
      - EDGE
  LambdaOneName:
    Type: String
  LambdaTwoName:
    Type: String
  LambdaOneArn:
    Type: String
  LambdaTwoArn:
    Type: String
  UserPoolArn: 
    Type: String
  UserPoolId:
    Type: String
#################################################################
########################### Conditions ##########################
#################################################################

    
#################################################################
########################### Resources ###########################
#################################################################

Resources:


  ApiGwAccountConfig:
    Type: "AWS::ApiGateway::Account"
    Properties:
      CloudWatchRoleArn: !GetAtt "ApiGatewayLoggingRole.Arn"
  ApiGatewayLoggingRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - !Sub "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                  - logs:GetLogEvents
                  - logs:FilterLogEvents"
                Resource: '*'

  UserPoolResourceServer: 
    Type: AWS::Cognito::UserPoolResourceServer
    Properties: 
      UserPoolId: !Ref UserPoolId 
      Identifier: !Sub https://${APIGateway}.execute-api.${AWS::Region}.amazonaws.com
      Name: "Name" 
      Scopes: 
      - ScopeName: "accela.interface" 
        ScopeDescription: "Gets all files, gets a single file and puts a single file" 


  Authorizer:
    Type: 'AWS::ApiGateway::Authorizer'
    Properties:
      AuthorizerResultTtlInSeconds: '300'
      ProviderARNs: [!Ref UserPoolArn]
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      Name: !Sub ${Environment}-default-authorizer
      RestApiId: !Ref  APIGateway


  APIGateway:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Description: "API Gateway"
      Name: !Ref APIGatewayName
      Tags:
        - Key: Environment
          Value: !Ref Environment
      Parameters:
          endpointConfigurationTypes: !Ref ApiEndpointType

  InputResource:
    Type: 'AWS::ApiGateway::Resource'
    DependsOn:
      - APIGateway
    Properties:
      RestApiId: !Ref APIGateway
      ParentId: !GetAtt 
        - APIGateway
        - RootResourceId
      PathPart: "{folder}"

  ArchiveResource:
    Type: 'AWS::ApiGateway::Resource'
    DependsOn:
      - Method
    Properties:
      RestApiId: !Ref APIGateway
      ParentId: !GetAtt 
        - InputResource
        - ResourceId
      PathPart: "{proxy+}"

  Method:
    Type: 'AWS::ApiGateway::Method'
    DependsOn:
      - InputResource
    Properties:
      RestApiId: !Ref APIGateway
      ResourceId: !Ref InputResource
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizationScopes: 
        - {"Fn::Join": ["", ["https://",{"Ref": "APIGateway"},".execute-api.","amazonaws.com/",{"Ref": "Environment"},"/accela.interface"]]}
      AuthorizerId: !Ref Authorizer
      MethodResponses: 
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaOneArn}/invocations

  ProxyMethod:
    Type: 'AWS::ApiGateway::Method'
    DependsOn:
      - ArchiveResource
    Properties:
      RestApiId: !Ref APIGateway
      ResourceId: !Ref ArchiveResource
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizationScopes: 
        - {"Fn::Join": ["", ["https://",{"Ref": "APIGateway"},".execute-api.","amazonaws.com/",{"Ref": "Environment"},"/accela.interface"]]}
      AuthorizerId: !Ref Authorizer
      HttpMethod: ANY
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaTwoArn}/invocations



  Deployment:
    DependsOn:
      - ProxyMethod
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref APIGateway
      Description: latest
      StageName: !Ref Environment
      StageDescription:
        MetricsEnabled: true
        LoggingLevel: 'INFO'
        CanarySetting: 
          PercentTraffic: '0'
        CachingEnabled: true
        ThrottlingBurstLimit: '20'
        ThrottlingRateLimit: '100'

  # Stage:
  #   Type: AWS::ApiGateway::Stage
  #   DependsOn:
  #     - ProxyMethod
  #   Properties:
  #     StageName: !Ref Environment
  #     Description: Prod Stage 
  #     RestApiId: !Ref APIGateway
  #     DeploymentId: !Ref Deployment

  Lambda1InvokePermission:
     Type: AWS::Lambda::Permission
     Properties:
       FunctionName: !Ref LambdaOneName
       Action: "lambda:invokeFunction"
       Principal: "apigateway.amazonaws.com"
       SourceArn: {"Fn::Join": ["", ["arn:aws:execute-api:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":", {"Ref": "APIGateway"}, "/*"]]}

  Lambda2InvokePermission:
     Type: AWS::Lambda::Permission
     Properties:
       FunctionName: !Ref LambdaTwoName
       Action: "lambda:invokeFunction"
       Principal: "apigateway.amazonaws.com"
       SourceArn: {"Fn::Join": ["", ["arn:aws:execute-api:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":", {"Ref": "APIGateway"}, "/*"]]}

  usagePlan:
    Type: 'AWS::ApiGateway::UsagePlan'
    DependsOn:
      - Lambda2InvokePermission
    Properties:
      Description: !Sub ${Environment}-Usage-Plan
      Quota:
        Limit: 100
        Period: MONTH
      Throttle:
        BurstLimit: 1
        RateLimit: 1
      UsagePlanName: !Sub ${Environment}-Basic

  ApiKey:
    Type: 'AWS::ApiGateway::ApiKey'
    DependsOn:
      - usagePlan
      - Deployment
    Properties:
      Name: !Sub ${Environment}-EApp
      Description: CloudFormation API Key V1
      Enabled: true
      StageKeys:
        - RestApiId: !Ref APIGateway
          StageName: !Ref Environment

  usagePlanKey:
    Type: 'AWS::ApiGateway::UsagePlanKey'
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref usagePlan



  # UserPoolResourceServer: 
  #   Type: AWS::Cognito::UserPoolResourceServer
  #   DependsOn:
  #     - usagePlanKey
  #   Properties: 
  #     Name: !Sub ${Environment}-identifier
  #     UserPoolId: !Ref UserPoolId 
  #     Identifier: !Sub "https://${APIGateway}.execute-api.${AWS::Region}.amazonaws.com"


      
#################################################################
########################### Outputs #############################
#################################################################

Outputs:
  APIGatewayID:
    Value: !Ref APIGateway
    Description: RestAPI Id of API Gatway
  APIGatewayRootID:
    Value: !GetAtt APIGateway.RootResourceId
    Description:  RootResourceId  of API Gateway
